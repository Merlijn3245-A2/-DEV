{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"A2 Spectator Documentation","text":"<p>Welcome to the A2 Spectator system documentation! This is a work-in-progress users guide for the spectator camera system in A2. For the API reference docs, see the types files in the <code>A2\\Content\\Scripts\\Cameras\\Behaviors\\types</code> directory.</p> <p>A2's spectator camera system is designed to be customizable. In fact, the default cameras are built with the same tools that are available to you.</p> <p>This website is designed to help you understand the spectator camera system and how to extend it with your own scripts.</p> <p>These docs are under construction. If you see any errors or incomplete sections, please let us know.</p>"},{"location":"index.html#important-pages","title":"Important Pages","text":"<p> Getting Started  Default Cameras  GUI  Config Files  Post Processing</p>"},{"location":"configuration.html","title":"Configuration","text":"<p>The relationship between Behaviors (<code>.luau</code>) and Config files (<code>.json</code>) can be compared to the relationship between a class and an instance in object-oriented programming. The <code>.luau</code> file defines the behavior of the camera, while the <code>.json</code> file defines the instance of the camera. There can be multiple configuration files for each camera behavior, allowing you to have multiple instances of the same camera behavior with different settings.</p> <pre><code>Scripts\n    \u2514\u2500\u2500\u2500Cameras\n        \u251c\u2500\u2500\u2500Behaviors\n        \u2502   \u251c\u2500\u2500\u2500anotheraxiom.autocam.luau\n        \u2502   \u2514\u2500\u2500\u2500anotheraxiom.freecam.luau\n        \u2514\u2500\u2500\u2500Configs\n            \u251c\u2500\u2500\u2500anotheraxiom.autocam.json\n            \u251c\u2500\u2500\u2500anotheraxiom.autocam.customized.json\n            \u251c\u2500\u2500\u2500anotheraxiom.autocam.comp.json\n            \u2514\u2500\u2500\u2500anotheraxiom.freecam.json\n</code></pre>"},{"location":"configuration.html#using-config-files-in-scripts","title":"Using config files in scripts","text":"<p>Any data stored in the <code>customData</code> field of the config file is available to the camera script in the <code>config</code> global variable. By default, when someone else imports your camera script, their config file will be empty, meaning their <code>config</code> global variable will be empty as well. This is why it's important to initialize the config with default values in the camera script. An example pattern for initializing the config is shown below:</p> examplecam.jsonexamplecam.luau <pre><code>{\n    \"keybind\": \"X\",\n    \"script\": \"examplecam.luau\",\n    \"customData\": {\n        \"speed\": 10\n    }\n}\n</code></pre> <pre><code>-- This is a helper function to initialize the config with default values\nlocal function initializeConfig(defaultConfig)\n    for i, v in pairs(defaultConfig) do\n        if config[i] == nil then\n            config[i] = v\n        end\n    end\nend\n\n-- Main is called at the start of the script\nfunction main()\n    -- Add default values to any keys that don't exist in the config file\n    initializeConfig({\n        speed = 5,\n        sensitivity = 1\n    })\nend\n\nfunction tick(dt)\n    print(config.speed) -- 10\n    print(config.sensitivity) -- 1\nend\n</code></pre>"},{"location":"configuration.html#saving-config","title":"Saving config","text":"<p>By default, any changes to the global <code>config</code> variable are not saved to the config file and will be lost when the camera reloads. To persist your config changes across game restarts, you must call <code>saveConfig()</code>. This function will write the current state of the <code>config</code> variable to the config file. An example for saving the config is shown below:</p> examplecam.luau <pre><code>function tick(dt)\n    print(config.speed) -- 10\n    config.speed = 20\n    print(config.speed) -- 20\n\n    -- Save the config to the config file\n    saveConfig()\nend\n</code></pre>"},{"location":"default-cameras.html","title":"Default Cameras","text":"<p>A2 comes with the following default camera modes. You can modify them to fit your own needs, but be aware that game updates will remove your changes unless you copy the files out of the game's install folder.</p>"},{"location":"default-cameras.html#z-autocam","title":"<code>Z</code>: Autocam","text":"<ul> <li>Coming soon</li> </ul>"},{"location":"default-cameras.html#p-pov","title":"<code>P</code>: POV","text":"<ul> <li>Left and Right Arrow Keys or DPad switch between players</li> </ul>"},{"location":"default-cameras.html#f-follow-me","title":"<code>F</code>: Follow Me","text":"<ul> <li>Follows the player POV with the specified username. Edit the config file to specify the username.</li> </ul>"},{"location":"default-cameras.html#i-sideline","title":"<code>I</code>: Sideline","text":"<ul> <li>Coming soon</li> </ul>"},{"location":"default-cameras.html#x-freecam","title":"<code>X</code>: Freecam","text":"<p>Controls:</p> <ul> <li>WASD or Left Gamepad Stick - Movement horizontally</li> <li>Q/E or Gamepad Triggers - Movement up and down<ul> <li>Hold Alt to move vertically along the gravity axis</li> </ul> </li> <li>Mouse movement or Right Gamepad Stick - Pan</li> <li>Left Shift / Right Shoulder - Speed Up</li> <li>Left Control / Left Shoulder - Slow Down</li> <li>Caps Lock - Toggle smoothing</li> <li>Scroll wheel or Dpad Up/Down - Zoom</li> <li>Right mouse click and drag or Dpad Left/Right - Roll</li> </ul> <p>Gravity:</p> <p>The freecam automatically aligns to the gravity of the current district. To reduce the abruptness of the transition, the speed of the automatic alignment is controlled by the speed of the rotation input (mouse or right gamepad stick).</p> <p>GUI:</p> <p></p>"},{"location":"default-cameras.html#t-path-planner","title":"<code>T</code>: Path planner","text":"<ul> <li>Create or play back keyframe animations.</li> <li>To create animations:     1. Press the <code>V</code> key to add keyframes or click the button the GUI.     2. Then press <code>Ctrl+S</code> to save the current set of keyframes to the config file. This overwrites any previous keyframes.     3. To create multiple camera paths, copy the config file for the camera script <code>anotheraxiom.pathplanner.json</code>.</li> <li>To play back, press the <code>B</code> key.</li> <li>To clear the in-memory animation, press <code>Ctrl+R</code>.</li> </ul>"},{"location":"getting-started.html","title":"Getting Started","text":""},{"location":"getting-started.html#installation","title":"Installation","text":"<p>You must run the game at least once to generate the necessary files.</p> <p>To run the spectator client, you must have the desktop build of A2 installed in the Oculus app. Select the 3 dots next to the app in your library, and click \"Start in Desktop Mode\":</p> <p></p> <p>The GUI for spectator client is hidden by default, but can be toggled with <code>F1</code>. Once activated, a menu bar will appear at the top with options to open various panels:</p> <p></p>"},{"location":"getting-started.html#using-the-default-cameras","title":"Using the Default Cameras","text":"<p>Upon entering spectator, the default freecam (<code>anotheraxiom.freecam</code>) is activated. You can switch to other cameras using the Cameras panel (under <code>Spectator &gt; Cameras</code> or press <code>F2</code>), or by pressing their associated keybind. You can also use this panel to adjust the keybind for any camera.</p>"},{"location":"getting-started.html#editor-setup","title":"Editor Setup","text":"<p>While any text editor can be used to edit camera scripts, we recommend using VSCode with the following extensions:</p> <ul> <li>luau-lsp for language support.</li> <li>StyLua for code formatting.</li> </ul>"},{"location":"getting-started.html#creating-your-first-camera","title":"Creating Your First Camera","text":"<p>All cameras in A2 are powered by Luau scripts. In this section you will create a new script and add it to the game.</p>"},{"location":"getting-started.html#creating-a-camera-script","title":"Creating a Camera Script","text":"<p>To start, open the user camera folder in your documents directory (<code>C:\\Users\\[USERNAME]\\Documents\\Another-Axiom\\A2\\Cameras\\Behaviors</code>) in your editor. If the folder does not exist, make sure you run A2 at least once.</p> <p>Note</p> <p>Following this naming convention is not necessary, but it helps to prevent name collisions with other camera scripts</p> <p>Create a new file named <code>myname.mycamera.luau</code> and add the following contents:</p> myname.mycamera.luau<pre><code>print(\"Hello, A2!\")\n</code></pre> <p>Next, in A2, open up the Camera Logs panel under <code>Spectator &gt; Camera Logs</code> or press the <code>F4</code> key to open it. You should see your message printed there:</p> Camera Logs<pre><code>[myname.mycamera.luau]: Hello, A2!\n</code></pre> <p>Experiment</p> <p>Try changing the text to something different! The script will automatically reload when you save.</p>"},{"location":"getting-started.html#activating-your-camera","title":"Activating Your Camera","text":"<p>To activate your camera, bring up the Cameras panel again (<code>F2</code>), and select <code>Activate</code> next to <code>myname.mycamera.luau</code>. If you would like, you can add a keybind here to quickly switch to your camera.</p>"},{"location":"getting-started.html#adding-some-functionality","title":"Adding Some Functionality","text":"<p>As you can see, this camera doesn't do anything: the camera is stuck at the origin. Lets add some code to our script to make the camera move in a circle:</p> <p>Experiment</p> <p>Try changing this function to get different behaviors. What other shapes can you create?</p> myname.mycamera.luau<pre><code>local t = 0\n\nfunction tick(dt: number)\n  t += dt\n\n  local target = Vec3.new(0, 8000, -25000) -- a nice spot in the station\n  local offset = Vec3.new(math.sin(t), math.cos(t), 0) * 200\n\n  camera.position = target + offset\n  camera:lookAt(target, Vec3.upVector)\nend\n</code></pre> <p>After saving the file (and activating our camera if it is not already active), you should see the camera moving in a circle around the arena.</p>"},{"location":"getting-started.html#adding-a-gui","title":"Adding a GUI","text":"<p>As you can see, our script has several parameters that influence the path that it takes. Wouldn't it be nice if there was a way for the end user to adjust these without having to modify the source code?</p> <p>A2 exposes much of the functionality of ImGui to camera scripts. These methods are available under the <code>Gui</code> namespace, but can only be used inside of the <code>onGui</code> function.</p> <p>First, lets pull some of our parameters outside of <code>tick</code>:</p> myname.mycamera.luau<pre><code>local speed = 1\nlocal radius = 200\n\nlocal t = 0\n\nfunction tick(dt: number)\n  t += dt * speed\n\n  local target = Vec3.new(0, 8000, -25000) -- a nice spot in the station\n  local offset = Vec3.new(math.sin(t), math.cos(t), 0) * radius\n\n  camera.position = target + offset\n  camera:lookAt(target, Vec3.upVector)\nend\n</code></pre> <p>Now we can add a gui method to our script:</p> <p>Experiment</p> <p>Try adding an element to adjust the target. Is there a GUI element that works with <code>Vec3</code>'s?</p> myname.mycamera.luau<pre><code>-- ...\n\nfunction onGui()\n  Gui.text(\"My camera settings\")\n\n  speed = Gui.sliderFloat(\"Speed\", speed, -5, 5)\n  if Gui.button(\"-1\") then\n    speed = -1\n  end\n  Gui.sameLine()\n  if Gui.button(\"0\") then\n    speed = 0\n  end\n  Gui.sameLine()\n  if Gui.button(\"1\") then\n    speed = 1\n  end\n\n  radius = Gui.sliderFloat(\"Radius\", radius, 0, 2000)\nend\n\n-- ...\n</code></pre> <p>To bring up this menu, bring up the Current Camera panel (<code>Spectator &gt; Current Camera</code> or <code>F3</code>). This displays the GUI for whatever camera is currently active:</p> <p></p>"},{"location":"getting-started.html#the-camera-config","title":"The Camera Config","text":"<p>Now that the user can tweak the parameters of the camera, they might want to save these values for the next time they launch A2. Luckily, we can use the builtin <code>config</code> object to persist state. When the script loads, the saved configuration is loaded into the <code>config</code> object.</p> <p>To get us started, we can use the config object to store our <code>speed</code> and <code>radius</code> settings:</p> <p>Experiment</p> <p>If you've updated your script to adjust the target position, store the position in the same way.</p> myname.mycamera.luau<pre><code>config.speed = config.speed or 1 -- use a default value if config.speed is not set\nconfig.radius = config.radius or 200\n\nlocal t = 0\n\nfunction onGui()\n  Gui.text(\"My camera settings\")\n\n  config.speed = Gui.sliderFloat(\"Speed\", config.speed, -5, 5)\n  if Gui.button(\"-1\") then\n    config.speed = -1\n  end\n  Gui.sameLine()\n  if Gui.button(\"0\") then\n    config.speed = 0\n  end\n  Gui.sameLine()\n  if Gui.button(\"1\") then\n    config.speed = 1\n  end\n\n  config.radius = Gui.sliderFloat(\"Radius\", config.radius, 0, 2000)\nend\n\nfunction tick(dt: number)\n  t += dt * config.speed\n\n  local target = Vec3.new(0, 8000, -25000) -- a nice spot in the station\n  local offset = Vec3.new(math.sin(t), math.cos(t), 0) * config.radius\n\n  camera.position = target + offset\n  camera:lookAt(target, Vec3.upVector)\nend\n</code></pre> <p>By itself, this doesn't provide us with any persistence. In order to persist the state of <code>config</code>,  we need to call <code>saveConfig()</code>. Additionally, we can save a copy the config (using <code>table.clone()</code>) to allow the user to reset their config to its initial state:</p> <p>Experiment</p> <p>In addition to <code>Save</code> and <code>Undo</code>, there are hundreds of other icons available. Try using them in some other GUI labels!</p> myname.mycamera.luau<pre><code>config.speed = config.speed or 1 -- use a default value if config.speed is not set\nconfig.radius = config.radius or 200\n\noriginalConfig = table.clone(config)\n\nlocal t = 0\n\nfunction onGui()\n\n  -- ...\n\n  if Gui.button(Icon.Save .. \" Save Config\") then\n    saveConfig()\n    originalConfig = table.clone(config)\n  end\n\n  if Gui.button(Icon.Undo .. \" Reset Config\") then\n    config = table.clone(originalConfig)\n  end\nend\n\n-- ...\n</code></pre> <p>How is this config saved to disk?</p> <p>All of the configuration for a camera (what script to use, keybind, and configuration) is stored in a json file. The config data is stored under the <code>customdata</code> key. These camera files are located in the <code>Configs</code> folder next to the <code>Behaviors</code> folder, and are used to determine what cameras to spawn, and what scripts to use. However, when a script does not have any existing cameras associated with it, a default camera json (e.g. <code>myname.mycamera.json</code>) is generated. Multiple cameras can reference the same script while having different keybinds and configurations.</p> <p>Try making a copy of <code>myname.mycamera.json</code> and edit its custom data to change the config speed. Another camera will appear in the Cameras panel with the new speed.</p>"},{"location":"getting-started.html#whats-next","title":"What's next?","text":"<ul> <li>Examine the official cameras. Their files are located in the games install location (By default, <code>C:\\Program Files\\Oculus\\Software\\Software\\another-axiom-a2-cqxlff\\A2\\Content\\Scripts\\Cameras\\Behaviors\\</code>)</li> <li>For a reference of all functions and types available, see the <code>*.d.lua</code> type files located under the built in behaviors path. The <code>*.json</code> files are there to provide documentation during autocomplete, and are derived from the types files.</li> <li>Check out the replay functionality</li> <li>Check out the recommended Luau style guide</li> </ul>"},{"location":"gui.html","title":"GUI","text":"<p>A2 gives camera scripts the ability to design their own GUI window for configuration or control. A subset of the Dear ImGui library is available for use in camera scripts under the <code>Gui</code> namespace.</p>"},{"location":"gui.html#usage","title":"Usage","text":"<p>GUI elements can only be created during the <code>onGui()</code> function. This function is called by the game every time the GUI is updated, which is generally every frame if the GUI is visible. All GUI functions are contained in the <code>Gui</code> namespace.</p> <pre><code>function onGui()\n  -- GUI elements go here\n  Gui.text(\"Hello, world!\")\nend\n</code></pre> <p>Input GUI elements generally return the old or changed value. A common pattern is to pass in a variable, then set the same variable to the return value of the GUI element's return value:</p> <pre><code>local myBool: boolean = false\nlocal myFloat: number = 0\n\nfunction onGui()\n    myBool = Gui.checkbox(\"My Bool\", myBool)\n    myFloat = Gui.sliderFloat(\"My Float\", myFloat, 0, 100)\nend\n</code></pre> <p>Buttons return true on the frame that they are clicked:</p> <pre><code>function onGui()\n    if Gui.button(\"Click Me\") then\n        print(\"Clicked\")\n    end\nend\n</code></pre> <p>Currently available GUI elements:</p> <p></p>"},{"location":"post-processing.html","title":"Post Processing","text":"<p>Camera scripts can call functions to apply post-processing effects to the game. The goal of these effects are not to change the way the game world looks, but to change the properties of the camera that are looking at it. Post-processing effects can also be changed via the <code>Spectator-&gt;Post Processing</code> window in the game client.</p> <p>Post-processing effects are applied globally, so an effect applied in one camera script will persist across camera changes until another camera sets a different value.</p> <p>To disable depth-of-field, set the Focal Distance to 0.</p> <p>Currently available post-processing effects:</p> <p></p>"},{"location":"post-processing.html#usage","title":"Usage","text":"<p>To change post processing settings, use <code>postProcessSettings</code> to get the current settings. Modifying the properties on this table will change the post processing settings immediately.</p> <pre><code>postProcessingSettings.bloomIntensity = 1234\npostProcessingSettings.bloomThreshold = 1234\npostProcessingSettings.depthOfFieldFstop = 1234\npostProcessingSettings.depthOfFieldFocalDistance = 1234\npostProcessingSettings.depthOfFieldSensorWidth = 1234\npostProcessingSettings.chromaticAberrationIntensity = 1234\npostProcessingSettings.motionBlurAmount = 1234\n</code></pre> <p>To reset the post processing settings to their initial state, use <code>resetPostProcessingSettings()</code>.</p>"},{"location":"replays.html","title":"Replays","text":"<p>Replays can be controlled from within camera scripts. This gives camera scripts the ability to be designed around a particular replay, with precise animations or depth of field effects to match the players in the replay.</p>"},{"location":"replays.html#usage","title":"Usage","text":""},{"location":"replays.html#loading-replays","title":"Loading Replays","text":"<p>To load a replay file, call <code>Replay.load(\"replay_filename.a2replay\")</code>. This will add the replay file to the list of loaded replays. Replays can only be loaded from the standard replays directory, which is <code>~/Documents/Another-Axiom/A2/Replays/</code>.</p>"},{"location":"replays.html#controlling-playback","title":"Controlling Playback","text":"<p>Replays playback can be controlled with the following functions:</p> <ul> <li>Setting <code>isPlaying</code> to cause the replay to advance automatically.</li> <li>Calling <code>setPlaybackTimestamp()</code> to set a timestamp at which the replay was recorded.</li> <li>Calling <code>setPlaybackTimeSeconds()</code> to set the time in seconds from the beginning of the replay. This ranges from 0 to the replay duration.</li> </ul> <p>Loaded replays will always show their current playback position, but you can also get the frame data from multiple frames at once for analysis purposes.</p>"},{"location":"replays.html#examples","title":"Examples","text":""},{"location":"replays.html#drawing-a-point-cloud","title":"Drawing a Point Cloud","text":"<p>This example loads a replay and draws a point cloud of player head positions at a 5Hz sampling rate. It then unloads the replay. <pre><code>local replayName = \"example_replay.a2replay\"\n\nWorld.clear()\nlocal points = 0\nlocal replay = Replay.load(replayName)\nlocal resolution = 5 -- how many times per second to sample\n-- Loop through the replay at the sampling interval\nfor i = 1, replay:getDurationSeconds() * resolution do\n    -- Get the frame data at the current time\n    local frame = replay:getFrameAtTimeSeconds((i - 1) / resolution)\n    -- For each player, draw a point at their head position\n    for j = 1, #frame.players do\n        local player = frame.players[j]\n        World.drawPoint(player.head.position, 1, 0, 0, 6, 0)\n        points += 1\n    end\nend\nprint(\"Total points drawn: \" .. points)\nReplay.unloadByIndex(#Replay.listLoaded())\n</code></pre></p>"},{"location":"world-drawing.html","title":"World Drawing","text":"<p>The World Drawing API allows you to draw on the game world. This is useful for debugging, creating visual aids, or replay analysis.</p>"},{"location":"world-drawing.html#usage","title":"Usage","text":"<p>There are only three functions in the World Drawing API: <pre><code>World.drawLine()\nWorld.drawPoint()\nWorld.clear()\n</code></pre></p>"},{"location":"world-drawing.html#worlddrawline","title":"World.drawLine()","text":"<pre><code>World.drawLine(startPos: Vec3, endPos: Vec3, r: number, g: number, b: number, thickness: number, lifetime: number)\n</code></pre> <p>This draws a line from startPos to endPos with the specified color and thickness. The line will disappear after the specified lifetime in seconds. If a lifetime of 0 is specified, the line will be permanent until <code>World.clear()</code> is called.</p>"},{"location":"world-drawing.html#worlddrawpoint","title":"World.drawPoint()","text":"<pre><code>World.drawPoint(position: Vec3, r: number, g: number, b: number, pointSize: number, lifetime: number)\n</code></pre> <p>This draws a point at position with the specified color and size. The line will disappear after the specified lifetime in seconds. If a lifetime of 0 is specified, the line will be permanent until <code>World.clear()</code> is called. The point size is in screen pixels, and will scale when you get closer or further from the point in the game world.</p>"},{"location":"world-drawing.html#worldclear","title":"World.clear()","text":"<p><pre><code>World.clear()\n</code></pre> This removes all lines and points drawn on the world, even if they were set to be permanent.</p>"}]}